// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb.proto

package __

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Group                string   `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Key                  string   `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *Request) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

type ResponseForGet struct {
	Value                []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseForGet) Reset()         { *m = ResponseForGet{} }
func (m *ResponseForGet) String() string { return proto.CompactTextString(m) }
func (*ResponseForGet) ProtoMessage()    {}
func (*ResponseForGet) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{1}
}

func (m *ResponseForGet) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseForGet.Unmarshal(m, b)
}
func (m *ResponseForGet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseForGet.Marshal(b, m, deterministic)
}
func (m *ResponseForGet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseForGet.Merge(m, src)
}
func (m *ResponseForGet) XXX_Size() int {
	return xxx_messageInfo_ResponseForGet.Size(m)
}
func (m *ResponseForGet) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseForGet.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseForGet proto.InternalMessageInfo

func (m *ResponseForGet) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type ResponseForDelete struct {
	Value                bool     `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResponseForDelete) Reset()         { *m = ResponseForDelete{} }
func (m *ResponseForDelete) String() string { return proto.CompactTextString(m) }
func (*ResponseForDelete) ProtoMessage()    {}
func (*ResponseForDelete) Descriptor() ([]byte, []int) {
	return fileDescriptor_f80abaa17e25ccc8, []int{2}
}

func (m *ResponseForDelete) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseForDelete.Unmarshal(m, b)
}
func (m *ResponseForDelete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseForDelete.Marshal(b, m, deterministic)
}
func (m *ResponseForDelete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseForDelete.Merge(m, src)
}
func (m *ResponseForDelete) XXX_Size() int {
	return xxx_messageInfo_ResponseForDelete.Size(m)
}
func (m *ResponseForDelete) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseForDelete.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseForDelete proto.InternalMessageInfo

func (m *ResponseForDelete) GetValue() bool {
	if m != nil {
		return m.Value
	}
	return false
}

func init() {
	proto.RegisterType((*Request)(nil), "pb.Request")
	proto.RegisterType((*ResponseForGet)(nil), "pb.ResponseForGet")
	proto.RegisterType((*ResponseForDelete)(nil), "pb.ResponseForDelete")
}

func init() { proto.RegisterFile("pb.proto", fileDescriptor_f80abaa17e25ccc8) }

var fileDescriptor_f80abaa17e25ccc8 = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x28, 0x48, 0xd2, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x32, 0xe4, 0x62, 0x0f, 0x4a, 0x2d, 0x2c,
	0x4d, 0x2d, 0x2e, 0x11, 0x12, 0xe1, 0x62, 0x4d, 0x2f, 0xca, 0x2f, 0x2d, 0x90, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x0c, 0x82, 0x70, 0x84, 0x04, 0xb8, 0x98, 0xb3, 0x53, 0x2b, 0x25, 0x98, 0xc0, 0x62,
	0x20, 0xa6, 0x92, 0x1a, 0x17, 0x5f, 0x50, 0x6a, 0x71, 0x41, 0x7e, 0x5e, 0x71, 0xaa, 0x5b, 0x7e,
	0x91, 0x7b, 0x2a, 0x58, 0x67, 0x59, 0x62, 0x4e, 0x69, 0x2a, 0x58, 0x27, 0x4f, 0x10, 0x84, 0xa3,
	0xa4, 0xc9, 0x25, 0x88, 0xa4, 0xce, 0x25, 0x35, 0x27, 0xb5, 0x24, 0x15, 0x55, 0x29, 0x07, 0x54,
	0xa9, 0xd1, 0x2e, 0x46, 0x2e, 0x2e, 0x77, 0x90, 0x75, 0xce, 0x89, 0xc9, 0x19, 0xa9, 0x42, 0x6a,
	0x5c, 0xcc, 0x20, 0x63, 0xb9, 0xf5, 0x0a, 0x92, 0xf4, 0xa0, 0xae, 0x93, 0x12, 0x82, 0x70, 0x50,
	0xec, 0xd5, 0xe1, 0x62, 0x83, 0x1a, 0x8b, 0xa2, 0x54, 0x14, 0x4d, 0x29, 0x54, 0x8d, 0x3a, 0x17,
	0x8b, 0x07, 0x51, 0xc6, 0xea, 0x72, 0xb1, 0x7b, 0x10, 0x6f, 0xae, 0x13, 0x5b, 0x14, 0x8b, 0x9e,
	0x75, 0x7c, 0x7c, 0x12, 0x1b, 0x38, 0x54, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x31, 0x99,
	0xce, 0x57, 0x61, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GroupCacheClient is the client API for GroupCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GroupCacheClient interface {
	Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ResponseForGet, error)
	Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ResponseForDelete, error)
	HGet(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ResponseForGet, error)
	HDelete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ResponseForDelete, error)
}

type groupCacheClient struct {
	cc *grpc.ClientConn
}

func NewGroupCacheClient(cc *grpc.ClientConn) GroupCacheClient {
	return &groupCacheClient{cc}
}

func (c *groupCacheClient) Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ResponseForGet, error) {
	out := new(ResponseForGet)
	err := c.cc.Invoke(ctx, "/pb.GroupCache/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCacheClient) Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ResponseForDelete, error) {
	out := new(ResponseForDelete)
	err := c.cc.Invoke(ctx, "/pb.GroupCache/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCacheClient) HGet(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ResponseForGet, error) {
	out := new(ResponseForGet)
	err := c.cc.Invoke(ctx, "/pb.GroupCache/HGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupCacheClient) HDelete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ResponseForDelete, error) {
	out := new(ResponseForDelete)
	err := c.cc.Invoke(ctx, "/pb.GroupCache/HDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupCacheServer is the server API for GroupCache service.
type GroupCacheServer interface {
	Get(context.Context, *Request) (*ResponseForGet, error)
	Delete(context.Context, *Request) (*ResponseForDelete, error)
	HGet(context.Context, *Request) (*ResponseForGet, error)
	HDelete(context.Context, *Request) (*ResponseForDelete, error)
}

// UnimplementedGroupCacheServer can be embedded to have forward compatible implementations.
type UnimplementedGroupCacheServer struct {
}

func (*UnimplementedGroupCacheServer) Get(ctx context.Context, req *Request) (*ResponseForGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedGroupCacheServer) Delete(ctx context.Context, req *Request) (*ResponseForDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedGroupCacheServer) HGet(ctx context.Context, req *Request) (*ResponseForGet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HGet not implemented")
}
func (*UnimplementedGroupCacheServer) HDelete(ctx context.Context, req *Request) (*ResponseForDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HDelete not implemented")
}

func RegisterGroupCacheServer(s *grpc.Server, srv GroupCacheServer) {
	s.RegisterService(&_GroupCache_serviceDesc, srv)
}

func _GroupCache_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCacheServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GroupCache/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCacheServer).Get(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCache_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCacheServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GroupCache/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCacheServer).Delete(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCache_HGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCacheServer).HGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GroupCache/HGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCacheServer).HGet(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _GroupCache_HDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupCacheServer).HDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.GroupCache/HDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupCacheServer).HDelete(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _GroupCache_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.GroupCache",
	HandlerType: (*GroupCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GroupCache_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GroupCache_Delete_Handler,
		},
		{
			MethodName: "HGet",
			Handler:    _GroupCache_HGet_Handler,
		},
		{
			MethodName: "HDelete",
			Handler:    _GroupCache_HDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb.proto",
}
